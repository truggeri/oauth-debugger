openapi: 3.0.3
info:
  title: Oauth Debugger
  description: This application is a mock authorization server to be used as a debugger for other application developers
  contact:
    email: oauth-debugger@truggeri.com
  license:
    name: MIT
    url: https://github.com/truggeri/oauth-debugger/blob/main/LICENSE
  version: 0.1.0
externalDocs:
  description: See our Github
  url: https://github.com/truggeri/oauth-debugger/
servers:
- url: https://oauth-debugger.truggeri.com/
tags:
  - name: oauth2
    description: Oauth2 routes
  - name: setup
    description: Get setup to use this application
paths:
  /oauth/authorize:
    get:
      tags:
      - oauth2
      summary: User authorization request
      description: Client makes initial request for user authorization.
      operationId: authorize
      parameters:
        - name: client_id
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: response_type
          in: query
          description: Static value of 'code'
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: Redirect uri
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: scope
          in: query
          description: Scope of the request, 'read'
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        200:
          description: Valid request
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Sets a cookie for use in CSRF protection
          content:
            application/html: {}
        400:
          description: Missing required param
          content:
            text/plain:
              schema:
                type: string
                example: client_id is missing
        401:
          description: client_id does not exist
          content:
            text/plain:
              schema:
                type: string
                example: client_id does not exist
  /oauth/info:
    get:
      tags:
        - oauth2
      summary: Get user information for the given token
      description: Given a token, this will return information about the user that the token belongs to
      operationId: info
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: bearer
          required: true
          example: Bearer token
      security:
        - BearerAuth: []
      responses:
        200:
          description: Valid request
          headers:
            Cache-Control:
              schema:
                type: string
              description: Do not cache this response
              example: no-store
            Pragma:
              schema:
                type: string
              description: Do not cache this response
              example: no-cache
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResp'
        400:
          description: Missing required param (via Authorization header)
          content:
            text/plain:
              schema:
                type: string
                example: token is missing
        401:
          description: Invalid or expired request
          content:
            text/plain:
              schema:
                type: string
                example: token is invalid
  /oauth/token:
    post:
      tags:
      - oauth2
      summary: Access token request
      description: Client now makes a request for a token giving their ClientId and ClientSecret
      operationId: token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenReq'
      responses:
        200:
          description: Valid request
          headers:
            Cache-Control:
              schema:
                type: string
              description: Do not cache this response
              example: no-store
            Pragma:
              schema:
                type: string
              description: Do not cache this response
              example: no-cache
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResp'
        400:
          description: Missing required param
          content:
            text/plain:
              schema:
                type: string
                example: client_id is missing
        401:
          description: client_id does not exist, client_id does not match client_secret, or token is invalid
          content:
            text/plain:
              schema:
                type: string
                example: client_id does not exist
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token 
  schemas:
    InfoResp:
      type: object
      properties:
        breed:
          description: The breed of the user
          type: string
          example: Maltese
        good_boy:
          description: Is the user a good boy (always true)
          type: boolean
          example: true
        image_url:
          description: Url of an image url
          type: string
          example: https://someurl.com/images/good_boy.jpg
        name:
          description: Name of the user
          type: string
          example: Benny
    TokenReq:
      required:
        - client_id
        - client_secret
        - grant_type
        - code
      type: object
      properties:
        client_id:
          description: Status values that need to be considered for filter
          type: string
        client_secret:
          description: Status values that need to be considered for filter
          type: string
        grant_type:
          description: Static value of 'authorization_code'
          type: string
          example: authorization_code
        code:
          description: Code value provided by the `/oauth/authorize` route
          type: string
        redirect_uri:
          description: Redirect uri
          type: string
    TokenResp:
      required:
        - access_token
        - token_type
        - expires_in
        - refresh_token
        - scope
        - uid
      type: object
      properties:
        access_token:
          type: string
          description: Api token for use in subsequent requests
        token_type:
          type: string
          description: The type of token
          example: bearer
        expires_in:
          type: integer
          description: Seconds until the token expires
          format: int64
          example: 3600
        refresh_token:
          type: string
          description: A token used to refresh the access token before it expires
        scope:
          type: string
          description: The scope of the access tokens authorization
          example: read
        uid:
          type: string
          description: A unique identifier for the transaction
          example: a8040289-51fd-4fc6-a651-6e4d5c129d7d